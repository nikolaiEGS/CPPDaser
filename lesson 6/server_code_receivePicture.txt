#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h> //inet_addr
#include <unistd.h>	   //write
#include <iostream>
//#include "tensor/tensor.h"

void imageProcessing(char *image_rec, std::size_t image_size)
{
	// how can we get the row and column size of the pictur?
}

int main(int argc, char *argv[])
{
	int s, client_socket, c, read_size;
	sockaddr_in server, client;
	char client_message[2000] = {0};
	std::size_t read_counter = 0;

	if (((s = socket(AF_INET, SOCK_STREAM, 0)) < 0))
	{
		std::cout << "Could not create socket" << std::endl;
		std::cout << strerror(errno);
		return -1;
	}

	std::cout << "Socket created" << std::endl;

	server.sin_family = AF_INET;
	server.sin_addr.s_addr = inet_addr("192.168.148.131");
	server.sin_port = htons(8888);

	//Bind
	if (bind(s, (sockaddr *)&server, sizeof(server)) < 0)
	{
		std::cout << "bind failed. Error" << std::endl;
		std::cout << strerror(errno);
		return -1;
	}
	std::cout << "bind done" << std::endl;

	//Listen
	listen(s, 3);

	//Accept and incoming connection
	std::cout << "Waiting for incoming connections..." << std::endl;
	c = sizeof(sockaddr_in);

	//accept connection from an incoming client
	if ((client_socket = accept(s, (sockaddr *)&client, (socklen_t *)&c)) < 0)
	{
		std::cout << "accept failed" << std::endl;
		std::cout << strerror(errno);
		return -1;
	}

	std::cout << "Connection accepted" << std::endl;

	//1. add a recv to get the length of the image
	char size_recv[32] = {0};
	//int size_pic = std::stoi(size_string_recv);
	if ((read_size = recv(client_socket, size_recv, 32, 0)) > 0)
	{
		write(client_socket, (std::string("waiting for message of len ") + size_recv).c_str(), 1000);
		std::cout << "client message len: " << size_recv << std::endl;
		read_size = 0;
	}

	//2. create a new char array with the received size - l
	std::size_t image_size = atoi(size_recv);
	char image_recv[image_size + 1] = {0}; // why + 1 ??

	//3. recv in a while loop the image into the created buffer

	while ((read_size = recv(client_socket, &image_recv[read_counter], image_size - read_counter, 0)) > 0)
	{
		read_counter += read_size;
		std::cout << "received amount ... : " << read_counter << std::endl;
		if (image_size == read_counter)
		{
			std::cout << "image transfare finished" << std::endl;
			break;
		}
	}

	//4. send to the client bytes_received
	std::string reply_to_client = "Got your message of len: " + std::to_string(read_counter);
	send(client_socket, reply_to_client.c_str(), reply_to_client.size(), 0);

	if (read_size == 0)
	{
		std::cout << "Client disconnected" << std::endl;
	}
	else if (read_size == -1)
	{
		std::cout << "recv failed" << std::endl;
	}

	return 0;
}