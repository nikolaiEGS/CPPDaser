#include<iostream>
using namespace std;

template <typename T> class List {
	class Node {
	public:
		T value;
		Node* next;
		Node* prev;
		Node(T val) : value(val), next(nullptr), prev(nullptr) {}
	};
		Node* head = nullptr;
		Node* tail = nullptr;
		int size = 0;
	

public:

	List() = default;
	/* ------------------ does not work -----------------------------------
	List(const List& x) {
		cout << "insight List(x)" << endl;
		Node* i = nullptr;
		for (i = x.head; x.head != nullptr; i = x.head->next) {
			this->push(i->value);
		}
	}
	*/
// --------------- works -------------------------------------------------------
	void push(T value) {
		cout << "insight push" << endl;
		Node* temp = new Node(value);
		if (head == nullptr) {
			head = temp;
			tail = temp;
		}
		else {
			tail->next = temp;
			temp->prev = tail;
			tail = temp;
		}
		size++;
	}

	T pop() {
		if (head != NULL) {
			if (head->next == NULL) {
				Node* temp = head;
				head = nullptr;
				tail = nullptr;
				T v = temp->value;
				delete temp;
				return v;	
			} else {
				Node* temp = tail;
				tail = tail->prev;
				tail->next = nullptr;
				T v = temp->value;
				delete temp;
				return v;
			}
		}
	}

	void deleteElement(T val) {

	}

	bool findElement() {

	}

	void printElements(){
		Node* i = nullptr;
		for (i = head; i != nullptr; i = i->next) {
			cout << "--------- insight print ---------" << endl;
			cout << i->value << endl;
		}
	}
};

int main() {
	List <int> x;
	//List <int> y(x);
	x.push(4);
	x.push(8);
	x.push(9);
	x.printElements();

	int help = x.pop();
	cout << "pop == "<< help << endl;

	//cout << "--------- test ---------" << endl;
	//y.printElements();
}
